# name: Docker Image CI + SonarQube Scan

# on:
#   push:
#     branches: ['main']
#     paths:
#       - 'ci/**'
#       - '.github/workflows/**'

# jobs:
#   build-and-scan:
#     runs-on: ubuntu-latest

#     env:
#       DOCKER_HUB_REPO: 'shlomi00212'
#       DOCKER_IMAGE_NAME: 'hello-world-app-py'

#     steps:
#       # Checkout the code
#       - uses: actions/checkout@v4
#         with:
#           fetch-depth: 0 # Important: disable shallow clone to improve SonarQube analysis

#       # Log in to Docker Hub
#       - name: Log in to Docker Hub
#         uses: docker/login-action@v2
#         with:
#           username: ${{ secrets.DOCKER_HUB_USERNAME }}
#           password: ${{ secrets.DOCKER_HUB_TOKEN }}

#       # Build the Docker image
#       - name: Build the Docker image
#         run: docker build ./ci --file ./ci/Dockerfile --tag ${{ env.DOCKER_IMAGE_NAME }}:latest

#       # Run the Docker container
#       - name: Run container from the built image
#         run: docker run -d --name ${{ env.DOCKER_IMAGE_NAME }} ${{ env.DOCKER_IMAGE_NAME }}:latest

#       # Run SonarQube scan
#       - name: SonarQube Scan
#         uses: SonarSource/sonarqube-scan-action@v5
#         with:
#           projectBaseDir: ./ci/app
#           args: >
#             -Dsonar.projectKey=test
#             -Dsonar.projectName=test
#             -Dsonar.exclusions=**/myenv/**
#         env:
#           SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
#           SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

#       # Run a smoke test to verify the container runs correctly
#       - name: Run smoke test
#         run: |
#           sleep 5  #13.60.11.0 Wait for the container to stabilize
#           docker ps -a  # List all containers
#           docker logs ${{ env.DOCKER_IMAGE_NAME }}  # Show logs from the running container

#       # Tag the Docker image for Docker Hub
#       - name: Tag the Docker image
#         run: docker tag ${{ env.DOCKER_IMAGE_NAME }}:latest ${{ env.DOCKER_HUB_REPO }}/${{ env.DOCKER_IMAGE_NAME }}:latest

#       # Push the Docker image to Docker Hub
#       - name: Push the Docker image
#         run: docker push ${{ env.DOCKER_HUB_REPO }}/${{ env.DOCKER_IMAGE_NAME }}:latest
name: Docker Image CI + SonarQube Scan

on:
  push:
    branches: ['main']
    paths:
      - 'ci/**'
      - '.github/workflows/**'

jobs:
  build-and-scan:
    runs-on: ubuntu-latest

    env:
      DOCKER_HUB_REPO: 'shlomi00212'
      DOCKER_IMAGE_NAME: 'hello-world-app-py'

    steps:
      # Checkout the code
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 # SonarQube needs full history for blame analysis

      # Log in to Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      # Build the Docker image
      - name: Build the Docker image
        run: docker build ./ci --file ./ci/Dockerfile --tag ${{ env.DOCKER_IMAGE_NAME }}:latest

      # Run the Docker container
      - name: Run container from the built image
        run: docker run -d --name ${{ env.DOCKER_IMAGE_NAME }} ${{ env.DOCKER_IMAGE_NAME }}:latest

      # Run SonarQube scan
      - name: SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@v5
        with:
          projectBaseDir: ./ci/app
          args: >
            -Dsonar.projectKey=test
            -Dsonar.projectName=test
            -Dsonar.sources=.
            -Dsonar.exclusions=**/myenv/**
            -Dsonar.verbose=true
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

      # Debug: Show contents of report-task.txt to make sure it exists
      - name: Show report-task.txt content
        run: |
          echo "Checking if report-task.txt exists and its content:"
          ls -la ./ci/app/.scannerwork || echo "Directory .scannerwork does not exist"
          cat ./ci/app/.scannerwork/report-task.txt || echo "report-task.txt not found"

      # Wait for SonarQube to process analysis (optional, adjust if needed)
      - name: Wait for SonarQube processing
        run: sleep 15

      # Check SonarQube Quality Gate result
      - name: SonarQube Quality Gate check
        uses: sonarsource/sonarqube-quality-gate-action@master
        with:
          scanMetadataReportFile: ./ci/app/.scannerwork/report-task.txt
          pollingTimeoutSec: 600 # 10 minutes timeout
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

      # Smoke test to verify container works
      - name: Run smoke test
        run: |
          sleep 5
          docker ps -a
          docker logs ${{ env.DOCKER_IMAGE_NAME }}

      # Tag the Docker image
      - name: Tag the Docker image
        run: docker tag ${{ env.DOCKER_IMAGE_NAME }}:latest ${{ env.DOCKER_HUB_REPO }}/${{ env.DOCKER_IMAGE_NAME }}:latest

      # Push the image to Docker Hub
      - name: Push the Docker image
        run: docker push ${{ env.DOCKER_HUB_REPO }}/${{ env.DOCKER_IMAGE_NAME }}:latest
